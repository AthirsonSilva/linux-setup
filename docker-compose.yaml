version: '3'
services:
  # Apache Kafka's Zookeeper service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Apache Kafka's broker service
  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # RabbitMQ management service
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    command: rabbitmq-server
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE:-secret_cookie}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-admin}

    ports:
      - 5672:5672 # amqp
      - 15672:15672 # http
      - 15692:15692 # prometheus

    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 20s
      retries: 5

  # MySQL database
  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-test}

    ports:
      - 3306:3306

    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 5s
      timeout: 20s
      retries: 5

  # POstgreSQL database
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      POSTGRES_DB: ${POSTGRES_DB:-test}

    ports:
      - 5432:5432

    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 20s
      retries: 5

  # MongoDB database
  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-root}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-test}

    ports:
      - 27017:27017

    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.runCommand('ping').ok" ]
      interval: 5s
      timeout: 20s
      retries: 5

  # Microsoft SQL Server database
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      SA_PASSWORD: ${SA_PASSWORD:-root}
      ACCEPT_EULA: Y
      MSSQL_PID: Developer

    ports:
      - 1433:1433

    healthcheck:
      test: [ "CMD", "sqlcmd", "-Q", "SELECT 1" ]
      interval: 5s
      timeout: 20s
      retries: 5

  # Redis database
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379

    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 20s
      retries: 5

  # ElasticSearch database
  elasticsearch:
    image: elasticsearch:latest
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 5s
      timeout: 20s
      retries: 5

  # Cassandra database
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - 9042:9042

    healthcheck:
      test: [ "CMD", "nodetool", "status" ]
      interval: 5s
      timeout: 20s
      retries: 5
